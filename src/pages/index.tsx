import { signIn, useSession } from "next-auth/react";
import Head from "next/head";
import { trpc } from "@/utils/trpc";
import { useCreateMessage } from "@/hooks/useCreateMessage";
import { useMessages } from "@/hooks/useMessages";
import { nanoid } from "nanoid";
import { useState } from "react";
import { ChatList } from "@/components/ChatList";

export default function Home() {
  const [message, setMessage] = useState("");
  const { mutateAsync: createMessage } = useCreateMessage();
  const { data: messages } = useMessages();
  const sortedMessages = messages?.sort((a, b) => {
    return a.createdAt.getTime() - b.createdAt.getTime();
  });
  const session = useSession();

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <nav className="navbar px-10">
        <div className="flex-1">
          <p className="text-lg">Logo</p>
        </div>
        <div className="flex-none">
          <ul className="menu-horizontal">
            {session.status === "authenticated" ? (
              <li className="my-auto mr-4">{session.data?.user?.name}</li>
            ) : (
              <li>
                <button
                  className="btn"
                  onClick={() => {
                    signIn("github");
                  }}
                >
                  login
                </button>
              </li>
            )}
          </ul>
        </div>
      </nav>
      <main className="container px-10">
        <div>
          <h2 className="text-4xl mb-4">Messages</h2>
          <ChatList messages={sortedMessages ?? []} />
          <form
            onSubmit={(e) => {
              e.preventDefault();
              setMessage("");
              createMessage({
                text: message,
                clientId: nanoid(),
              });
            }}
            className="flex items-end gap-4"
          >
            <div className="form-control">
              <label className="label" htmlFor="message">
                <span className="label-text">Message</span>
              </label>
              <input
                className="input input-primary w-56"
                type="text"
                name="message"
                autoComplete="off"
                value={message}
                onChange={(e) => {
                  setMessage(e.target.value);
                }}
              />
            </div>
            <button type="submit" className="btn mt-3">
              send
            </button>
          </form>
        </div>
      </main>
    </>
  );
}
